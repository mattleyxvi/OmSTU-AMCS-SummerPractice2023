// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace specflow_bdd
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class НахождениеКорнейКвадратногоУравненияFeature : object, Xunit.IClassFixture<НахождениеКорнейКвадратногоУравненияFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "testing.feature"
#line hidden
        
        public НахождениеКорнейКвадратногоУравненияFeature(НахождениеКорнейКвадратногоУравненияFeature.FixtureData fixtureData, specflow_bdd_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "", "нахождение корней квадратного уравнения", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Если дискриминант квадратного уравнения больше 0, то квадратное уравнение имеет д" +
            "ва корня кратности 1")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Если дискриминант квадратного уравнения больше 0, то квадратное уравнение имеет д" +
            "ва корня кратности 1")]
        public void ЕслиДискриминантКвадратногоУравненияБольше0ТоКвадратноеУравнениеИмеетДваКорняКратности1()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Если дискриминант квадратного уравнения больше 0, то квадратное уравнение имеет д" +
                    "ва корня кратности 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
testRunner.Given("Квадратное уравнение с коэффициентами (1, 0, -1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 6
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 7
testRunner.Then("квадратное уравнение имеет два корня (1, -1) кратности один", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Если дискриминант квадратного уравнения равен 0, то квадратное уравнение имеет од" +
            "ин корень кратности 2")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Если дискриминант квадратного уравнения равен 0, то квадратное уравнение имеет од" +
            "ин корень кратности 2")]
        public void ЕслиДискриминантКвадратногоУравненияРавен0ТоКвадратноеУравнениеИмеетОдинКореньКратности2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Если дискриминант квадратного уравнения равен 0, то квадратное уравнение имеет од" +
                    "ин корень кратности 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
testRunner.Given("Квадратное уравнение с коэффициентами (1, -2, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 11
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 12
testRunner.Then("квадратное уравнение имеет один корень 1 кратности два", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Если дискриминант квадратного уравнения меньше 0, то квадратное уравнение не имее" +
            "т корней")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Если дискриминант квадратного уравнения меньше 0, то квадратное уравнение не имее" +
            "т корней")]
        public void ЕслиДискриминантКвадратногоУравненияМеньше0ТоКвадратноеУравнениеНеИмеетКорней()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Если дискриминант квадратного уравнения меньше 0, то квадратное уравнение не имее" +
                    "т корней", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
testRunner.Given("Квадратное уравнение с коэффициентами (1, 0, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 16
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 17
testRunner.Then("множество корней квадратного уравнения пустое", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент a квадратного уравнения не может быть равен 0")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент a квадратного уравнения не может быть равен 0")]
        public void КоэффициентAКвадратногоУравненияНеМожетБытьРавен0()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент a квадратного уравнения не может быть равен 0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
testRunner.Given("Квадратное уравнение с коэффициентами (1e-7, 0, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 21
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 22
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент a квадратного уравнение не может быть не числом")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент a квадратного уравнение не может быть не числом")]
        public void КоэффициентAКвадратногоУравнениеНеМожетБытьНеЧислом()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент a квадратного уравнение не может быть не числом", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
testRunner.Given("Квадратное уравнение с коэффициентами (NaN, 0, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 26
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 27
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент a квадратного уравнение не может быть положительной бесконечностью")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент a квадратного уравнение не может быть положительной бесконечностью")]
        public void КоэффициентAКвадратногоУравнениеНеМожетБытьПоложительнойБесконечностью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент a квадратного уравнение не может быть положительной бесконечностью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
testRunner.Given("Квадратное уравнение с коэффициентами (Double.PositiveInfinity, 0, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 31
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 32
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент a квадратного уравнение не может быть отрицательной бесконечностью")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент a квадратного уравнение не может быть отрицательной бесконечностью")]
        public void КоэффициентAКвадратногоУравнениеНеМожетБытьОтрицательнойБесконечностью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент a квадратного уравнение не может быть отрицательной бесконечностью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
testRunner.Given("Квадратное уравнение с коэффициентами (Double.NegativeInfinity, 0, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 36
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 37
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент b квадратного уравнение не может быть не числом")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент b квадратного уравнение не может быть не числом")]
        public void КоэффициентBКвадратногоУравнениеНеМожетБытьНеЧислом()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент b квадратного уравнение не может быть не числом", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
testRunner.Given("Квадратное уравнение с коэффициентами (1, NaN, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 41
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 42
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент b квадратного уравнение не может быть положительной бесконечностью")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент b квадратного уравнение не может быть положительной бесконечностью")]
        public void КоэффициентBКвадратногоУравнениеНеМожетБытьПоложительнойБесконечностью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент b квадратного уравнение не может быть положительной бесконечностью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
testRunner.Given("Квадратное уравнение с коэффициентами (1, Double.PositiveInfinity, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 46
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 47
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент b квадратного уравнение не может быть отрицательной бесконечностью")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент b квадратного уравнение не может быть отрицательной бесконечностью")]
        public void КоэффициентBКвадратногоУравнениеНеМожетБытьОтрицательнойБесконечностью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент b квадратного уравнение не может быть отрицательной бесконечностью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
testRunner.Given("Квадратное уравнение с коэффициентами (1, Double.NegativeInfinity, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 51
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 52
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент c квадратного уравнение не может быть не числом")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент c квадратного уравнение не может быть не числом")]
        public void КоэффициентCКвадратногоУравнениеНеМожетБытьНеЧислом()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент c квадратного уравнение не может быть не числом", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
testRunner.Given("Квадратное уравнение с коэффициентами (1, 0, NaN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 56
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 57
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент c квадратного уравнение не может быть положительной бесконечностью")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент c квадратного уравнение не может быть положительной бесконечностью")]
        public void КоэффициентCКвадратногоУравнениеНеМожетБытьПоложительнойБесконечностью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент c квадратного уравнение не может быть положительной бесконечностью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
testRunner.Given("Квадратное уравнение с коэффициентами (1, 0, Double.PositiveInfinity)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 61
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 62
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Коэффициент c квадратного уравнение не может быть отрицательной бесконечностью")]
        [Xunit.TraitAttribute("FeatureTitle", "нахождение корней квадратного уравнения")]
        [Xunit.TraitAttribute("Description", "Коэффициент c квадратного уравнение не может быть отрицательной бесконечностью")]
        public void КоэффициентCКвадратногоУравнениеНеМожетБытьОтрицательнойБесконечностью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Коэффициент c квадратного уравнение не может быть отрицательной бесконечностью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
testRunner.Given("Квадратное уравнение с коэффициентами (1, 0, Double.NegativeInfinity)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
#line 66
testRunner.When("вычисляются корни квадратного уравнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
#line 67
testRunner.Then("выбрасывается исключение ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                НахождениеКорнейКвадратногоУравненияFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                НахождениеКорнейКвадратногоУравненияFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
